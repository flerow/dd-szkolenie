<?php

namespace DomainDrivers\SmartSchedule\Planning\DefiningDependencies;

//generated by copilot, should rewrite to meet quality standards
class TarjanCyclesAsEdgesLists
{
    private $index = 0;
    private $stack = [];
    private $indices = [];
    private $lowLinks = [];
    private $onStack = [];
    private $SCCs = [];
    private $edgeObjects = [];

    public function tarjanSCCs(array $edges, array $edgeObjects): array {
        $this->edgeObjects = $edgeObjects;
        foreach (array_keys($edges) as $v) {
            if (!isset($this->indices[$v])) {
                $this->strongConnect($v, $edges);
            }
        }
        // Convert the SCC indices back to DependencyPair objects
        $result = [];
        foreach ($this->SCCs as $SCC) {
            $cycle = [];
            foreach ($SCC as $node) {
                foreach ($edges[$node] as $neighbor) {
                    if (in_array($neighbor, $SCC)) {
                        $cycle[] = $this->edgeObjects[$node][$neighbor];
                    }
                }
            }
            $result[] = $cycle;
        }

        return $result;
    }

    private function strongConnect(int $v, array $edges): void {
        $this->indices[$v] = $this->index;
        $this->lowLinks[$v] = $this->index;
        $this->index++;
        array_push($this->stack, $v);
        $this->onStack[$v] = true;

        foreach ($edges[$v] as $w) {
            if (!isset($this->indices[$w])) {
                $this->strongConnect($w, $edges);
                $this->lowLinks[$v] = min($this->lowLinks[$v], $this->lowLinks[$w]);
            } else if ($this->onStack[$w]) {
                $this->lowLinks[$v] = min($this->lowLinks[$v], $this->indices[$w]);
            }
        }

        if ($this->lowLinks[$v] == $this->indices[$v]) {
            $SCC = [];
            do {
                $w = array_pop($this->stack);
                $this->onStack[$w] = false;
                array_push($SCC, $w);
            } while ($w != $v);
            if (count($SCC) > 1) {
                array_push($this->SCCs, $SCC);
            }
        }
    }
}